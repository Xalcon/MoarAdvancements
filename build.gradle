buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.9'
}

apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = version_major + '.' + version_minor + '.' + version_patch + '.' + getBuildNumber()
group = "$group.$modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "$modid"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "$mc_version-$forge_version"
    runDir = "run"

    clientJvmArgs = ["-Dfml.coreMods.load=net.xalcon.moaradvancements.asm.MoarAdvancementsPlugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=net.xalcon.moaradvancements.asm.MoarAdvancementsPlugin"]

    mappings = "$mcp_mappings"

    replace '@VERSION@', project.version
    replace '@BUILD_NUMBER@', getBuildNumber()
    replace '@CERT_FINGERPRINT@', cert_fingerprint
}

dependencies {
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	
	// move access transformers configs to META-INF folder
	rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
	manifest {
        attributes 'FMLCorePlugin': "net.xalcon.moaradvancements.asm.MoarAdvancementsPlugin"
        attributes 'FMLCorePluginContainsFMLMod': "true"
	    attributes 'FMLAT': 'moaradvancements_at.cfg'
	}
}
/* Jar Signing */
task signJar(type: SignJar, dependsOn: reobfJar) {
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar

/* Curse Config */
def curse_api_key=""

if(new File("$System.env.confidental_properties").exists()) {
    println("Found confidenntal gradle properties, loading...")
    Properties props = new Properties()
    props.load(new FileInputStream("$System.env.confidental_properties"))
    signJar.keyStore=props.jarsign_keystore
    signJar.alias=props.jarsign_keystore_alias
    signJar.storePass=props.jarsign_keystore_pass
    signJar.keyPass=props.jarsign_key_pass

    curse_api_key=props.curse_api_key
}

curseforge {
    apiKey = curse_api_key

    project {
        id = "${curse_id}"
        changelogType = "markdown"
        changelog = new File('changelog.md')
        releaseType = "$System.env.release_type" != "null" ? "$System.env.release_type" : 'alpha'
        mainArtifact jar
    }
}

/* misc */
def static getBuildNumber() {
    return "$System.env.BUILD_NUMBER" != "null" ? "$System.env.BUILD_NUMBER" : "0"
}